datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  // url = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

/// Represents a country, which can have associated actors, awards, movies, and directors.
model Country {
  code      String     @id
  name      String
  actors    Actor[]
  awards    Award[]
  movies    Movie[]
  directors Director[]
}

/// Represents a genre associated with various movies.
model Genre {
  id     Int           @id @default(autoincrement())
  name   String
  movies MovieGenres[]
}

/// Represents an award given in a specific year and associated with a country and movies.
model Award {
  id          Int           @id @default(autoincrement())
  name        String
  year        DateTime
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieAwards[]

  @@index([countryCode, year])
}

/// Represents an actor with optional photo URL and association with a country and multiple movies.
model Actor {
  id          Int           @id @default(autoincrement())
  name        String
  birthDate   DateTime
  photoUrl    String?
  country     Country       @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      MovieActors[]

  @@index([countryCode])
}

/// Represents a director associated with a country and can direct multiple movies.
model Director {
  id          Int      @id @default(autoincrement())
  name        String
  birthDate   DateTime
  photoUrl    String?
  country     Country  @relation(fields: [countryCode], references: [code])
  countryCode String
  movies      Movie[]

  @@index([countryCode])
}

/// Represents a movie with multiple properties such as release date, rating, and associations to country, director, user, actors, genres, awards, and reviews.
model Movie {
  id             Int      @id @default(autoincrement())
  title          String
  synopsis       String
  posterUrl      String
  backdropUrl    String
  videoUrl       String?
  releaseDate    DateTime
  approvalStatus Boolean
  rating         Float?

  country     Country?  @relation(fields: [countryCode], references: [code])
  countryCode String?
  director    Director? @relation(fields: [directorId], references: [id])
  directorId  Int?
  addedBy     User      @relation(fields: [userId], references: [id])
  userId      Int

  actors  MovieActors[]
  genres  MovieGenres[]
  awards  MovieAwards[]
  reviews Review[]

  @@index([countryCode, directorId, userId, releaseDate, rating])
}

/// Represents a many-to-many relationship between movies and actors.
model MovieActors {
  actor   Actor @relation(fields: [actorId], references: [id])
  actorId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([movieId, actorId])
}

/// Represents a many-to-many relationship between movies and genres.
model MovieGenres {
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@id([movieId, genreId])
}

/// Represents a many-to-many relationship between movies and awards.
model MovieAwards {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  award   Award @relation(fields: [awardId], references: [id])
  awardId Int

  @@id([movieId, awardId])
}

/// Represents a review of a movie by a user with a unique composite key of user and movie.
model Review {
  id             Int     @id @default(autoincrement())
  userId         Int
  movieId        Int
  content        String
  rating         Int
  approvalStatus Boolean
  user           User    @relation(fields: [userId], references: [id])
  movie          Movie   @relation(fields: [movieId], references: [id])

  @@index([movieId, userId])
}

/// Represents a user with various attributes and relationships with reviews and movies.
model User {
  id                      Int       @id @default(autoincrement())
  username                String
  email                   String    @unique
  password                String?
  photoProfile            String?
  provider                String?   @default("email")
  role                    String?   @default("writer")
  isVerified              Boolean   @default(false)
  verificationCode        String?
  verificationCodeExpired DateTime? @default(dbgenerated("now() + interval '1 day'"))
  verificationRequestDate DateTime? @default(now())
  isSuspended             Boolean   @default(false)
  reviews                 Review[]
  movies                  Movie[]

  @@index([username])
}
